
; TIPI IO ports

	.ifdef emulation
TDOUT	EQU	>AFFF		; TI Data (output)
TCOUT	EQU	>AFFD		; TI Control Signal (output)
RDIN	EQU	>AFFB		; PI Data (input)
RCIN	EQU	>AFF9		; PI Control Signal (input)
	.else
TDOUT	EQU	>5FFF		; TI Data (output)
TCOUT	EQU	>5FFD		; TI Control Signal (output)
RDIN	EQU	>5FFB		; PI Data (input)
RCIN	EQU	>5FF9		; PI Control Signal (input)
	.endif

; TIPI Signal Constants
TSRSET	EQU	>F100		; Reset SYN value
TSWB	EQU	>0200		; Write Byte SYN value
TSRB	EQU	>0600		; Read Byte SYN value

;;; Macro: handshake TSWB or handshake TSRB to signal and increment syn/ack in R2, also destroys R3.
	.defm transmit
	MOVB	R2,@TCOUT
!	MOVB	@RCIN,R3
	CB	R2,R3
	.ifndef emulation
	JNE	-!
	.else
	NOP
	.endif
	AI	R2,>0100
	ANDI	R2,>0100
	ORI	R2,#1
	.endm

;;; Macro: reset, super simple handshake with no rolling of bits.
	.defm reset
	LI	R2,TSRSET
	MOVB	R2,@TCOUT
!	CB	@RCIN,R2
	.ifndef emulation
	JNE	-!
	.else
	NOP
	.endif
	.endm

;;; SEND a message to the RPi - Sends a word containing the length of message, then the bytes of the message.
; Register usage:
;   R0 - contains length of message. Result is 0 if all bytes sent.
;   R1 - cpu address of bytes to send.
;   Destroys R2, R3, and potentially the first and last word of bytes to send.
sendmsg
	.reset
	LI	R2,TSWB
	MOVB	R0,@TDOUT
	.transmit TSWB
	SWPB	R0
	MOVB	R0,@TDOUT
	.transmit TSWB
	SWPB	R0
	CI	R0,0
	JEQ	sdone
	
snext
	MOVB	*R1,@TDOUT
	.transmit TSWB
	INC	R1
	DEC	R0
	JNE	snext
sdone
	RT


;;; SEND a message to the RPi - Sends a word containing the length of message, then the bytes of the message.
; Register usage:
;   R0 - contains length of message. Result is 0 if all bytes sent.
;   R1 - vdp address of bytes to send.
;   Destroys R2, R3, and potentially the first and last word of bytes to send.
vsendmsg
	.reset
	LI	R2,TSWB
	MOVB	R0,@TDOUT
	.transmit TSWB
	SWPB	R0
	MOVB	R0,@TDOUT
	.transmit TSWB
	SWPB	R0
	CI	R0,0
	JEQ	vsdone

	.setvdpra R1
vsnext
	MOVB	@VDPRD,@TDOUT
	.transmit TSWB
	DEC	R0
	JNE	vsnext
vsdone
	RT
	

;;; REQUEST a message from the RPi - expects the PI to send a word containing the length of the message followed by the payload.
; Register usage:
;   R0 - Set to number of bytes loaded into buffer upon completion
;   R1 - cpu address of buffer
;   Destroys R0 - R4
recvmsg
	.reset			; conduct the handshake operation
	LI	R2,TSRB		; set read mode
	.transmit TSRB		; wait for byte ready
	MOVB	@RDIN,R4	; read MSB of data size
	SWPB	R4
	.transmit TSRB		; wait for byte ready
	MOVB	@RDIN,R4	; read LSB of data size
	SWPB	R4
	CLR	R0		; reset byte counter
	CI	R4,>0000	; if size is 0, then be done
	JEQ	rrt

rnext
	.transmit TSRB		; wait for byte ready
	MOVB	@RDIN,*R1+	; copy byte from tipi to RAM
        INC     R0		; count the read ops
	C	R0,R4
	JNE	rnext		; if not done then go back and read next
rrt
	RT

;;; REQUEST a message from the RPi - expects the PI to send a word containing the length of the message followed by the payload.
; Register usage:
;   R0 - Set to number of bytes loaded into buffer upon completion
;   R1 - vdp address of buffer
;   Destroys R2, R3, and R4
vrecvmsg
	.reset			; conduct the handshake operation
	LI	R2,TSRB		; set read byte mode
	.transmit TSRB		; wait for byte ready
	MOVB	@RDIN,R4	; read MSB of data size
	SWPB	R4
	.transmit TSRB		; wait for next byte
	MOVB	@RDIN,R4	; read LSB of data size
	SWPB	R4
	CLR	R0		; set counter for read data
	CI	R4,>0000	; if size is 0, then be done.
	JEQ	vrrt

	.setvdpwa R1		; set destination for the data we read
vrnext
	.transmit TSRB		; wait for byte ready
	MOVB	@RDIN,@VDPWD	; copy byte from tipi to vdp
	INC	R0		; count the read ops
	C	R0,R4
	JNE	vrnext		; if not read expected size then read next
vrrt
	RT




