	REF	A,B,FIRE,SPACE,RBAND,ZOOM,ZOOM2
	REF	XMIN,YMIN,XMAX,YMAX
	REF	DELAY,DELAY2,DELCNT,DELCN2
 
	JMP	MOUSE
 
; TIPI Mouse driver for TI-Artist Plus

LBNOW	DATA	0
LBLAST	DATA	0

MWS	BSS	>20	; MOUSE-WORKSPACE
MWSR2	EQU	MWS+4
MWSR3	EQU	MWS+6
MWSR4	EQU	MWS+8

 
; TIPI Info
MBLEFT	EQU	>01
MBRIGHT	EQU	>02
MBMID	EQU	>04

GPLWS	EQU	>83E0
GPLWSR1	EQU	>83E2

; Message code for mouse request
MOUREQ	BYTE	>20
EVEN

SENDMSG	EQU	>4012
RECVMSG	EQU	>4010

; once discovered, will hold crubase to reduce lookup cost
CRUBASE	DATA	>0000

; so we can tell if we are releasing middle button
WASMID	DATA	>0000

WORKSV	DATA	0
 
MOUSE	STWP	R0		; record old WP
	MOV	R0,@WORKSV
	MOV	R15,@MWS+30	; record old BLWP return address
	LWPI	MWS
 
	MOV	@CRUBASE,@CRUBASE	; do we need to find the crubase?
	JNE	READM
	BL	@FINDCRU

READM
	MOV	@CRUBASE,R12	; enable tipi device
	SBO	0

	LI	R0,>0001	; send message requesting mouse DATA
	MOV	R0,@GPLWS	; set R0 in GPLWS to length of message
	LI	R0,MOUREQ
	MOV	R0,@GPLWSR1	; set R1 to address of message data
	LWPI	GPLWS
	MOV	@SENDMSG,R4
	BL	*R4
	LWPI	MWS

	CLR	R0		; receive mouse data back (using R3,R4 as buffer)
	MOV	R0,@GPLWS
	LI	R0,MWSR3	; set R3 as buffer location
	MOV	R0,@GPLWSR1
	LWPI	GPLWS
	MOV	@RECVMSG,R4
	BL	*R4
	LWPI	MWS
	MOV	@GPLWS,R2	; copy the receive length back into R2.

	SBZ	0		; disable tipi device

	; Now MSB of R3 is x delta, LSB of R3 is y delta, and MSB of R4 is button states

	CLR	R0
	MOVB	R3,R0
	SRA	R0,8		; convert signed byte to signed word
	BL	@SCALE
	A	R0,@A(R15)	; set x

	CLR	R0
	MOVB	@MWS+7,R0
	SRA	R0,8		; convert signed byte to signed word
	BL	@SCALE
	A	R0,@B(R15)	; set y

	C	@A(R15),@XMIN	; check limits
	JGT	C1
	MOV	@XMIN,@A(R15)
C1
	C	@A(R15),@XMAX
	JLE	C2
	MOV	@XMAX,@A(R15)
C2
	C	@B(R15),@YMIN
	JGT	C3
	MOV	@YMIN,@B(R15)
C3
	C	@B(R15),@YMAX
	JLE	BUTTONS
	MOV	@YMAX,@B(R15)
 
BUTTONS
	CLR	R0		; look for middle button
	MOVB	R4,@MWS+1
	ANDI	R0,MBMID
	JEQ	MIDOFF
	SETO	@WASMID
	JMP	FIREBUT

MIDOFF
	MOV	@WASMID,@WASMID	; test for if middle button was pressed on previous cycle
	JEQ	FIREBUT
	CLR	@WASMID
	SETO	@SPACE	

FIREBUT
	MOV	@LBNOW,@LBLAST	; store left button state from previous cycle
	CLR	@LBNOW
	CLR	@FIRE		; look at left mouse button
	CLR	R0
	MOVB	R4,@MWS+1
	ANDI	R0,MBLEFT|MBRIGHT
	JEQ	DONE
	SETO	@LBNOW		; R6/LBNOW fresh left button state



DONE
	MOV	@WORKSV,@$+8
	LWPI	>AAAA
	MOV	R14,R14		; WTF? R14 seems to be undocumented
	JEQ	FIREON		; magic interaction regarding if fire button should be set?
	C	@LBNOW,@LBLAST	; compare latest lbutton state with last time 
	JEQ	FIREOFF

FIREON
	MOV	@LBNOW,@FIRE
FIREOFF
	RT

SCALE
	CLR	R2
	ABS	R0
	JGT	POSITIVE
	SETO	R2
POSITIVE
	MOV	R4,R5
	SWPB	R5
	ANDI	R5,MBRIGHT
	JNE	DOZOOM

	MOV	@ZOOM,@ZOOM
	JEQ	NOZOOM
DOZOOM
	ANDI	R0,1		; if zoom, move at most 1 pixel
NOZOOM
	CI	R2,0
	JEQ	STILLPOS
	NEG	R0
STILLPOS
	RT

TIPI
	BYTE	>04,'T','I','P','I'
	EVEN

FINDCRU
	LI	R12,>1000
ISDSR	
	SBO	0
	LI	R0,>AA00
	CB	@>4000,R0
	JNE	NEXTCARD	; no dsr rom header
	MOV	@>4008,R0
	JEQ	NEXTCARD	; end of DSR list
	AI	R0,4		; R0 now points to DSR name
	LI	R1,TIPI
	LI	R2,5		; compare 5 bytes of name string
TEST
	CB	*R0+,*R1+
	JNE	NEXTCARD
	DEC	R2
	JNE	TEST
	SBZ	0		; Found TIPI!
	MOV	R12,@CRUBASE
	RT

NEXTCARD
	SBZ	0
	AI	R12,>0100
	CI	R12,>2000
	JEQ	NOTIPI
	JMP	ISDSR
	
NOTIPI
	CLR	@CRUBASE
	RT
 
	END

