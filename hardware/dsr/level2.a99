
; These routines are called by DSRLNK. RT to cascade to the next controller. INCT R11, and then RT to indicate it is handled.

; Custom single byte messages to send TIPI and get into handling the given routines
;  I have lots of rom, so I'm going to abuse it.
SECT_MSG
	BYTE	>10

PROT_MSG
	BYTE	>12

FREN_MSG
	BYTE	>13

DINP_MSG
	BYTE	>14

DOUT_MSG
	BYTE	>15

PATH_MSG
	BYTE	>17

CDIR_MSG
	BYTE	>18

DDIR_MSG
	BYTE	>19

RDIR_MSG
	BYTE	>1A

	EVEN

; Error codes must go in >8350
L2STAT	EQU	>8350

; Parameters
BUFCNT	EQU	>834C

; Common addresses
UNITNO	EQU	>834C
PROTVAL	EQU	>834D
BLOCKCNT EQU	PROTVAL		; number of blocks to read/write
WFILNAM	EQU	>834E		; (vdp addr) note, filenames are 10 characters... space padded in this context.
WOLDNAM	EQU	>8350		; (vdp addr) if two names are used, this is the original
PATHNAM EQU	WFILNAM		; (vdp addr) path name for set path operation.
SECREAD EQU	>834A		; after reading a sector, the sector number ends up here
SECTORN EQU	>8350		; sector to read
READWRI	EQU	>834D		; sector operation mode, if 0 write, else read
SECTBUF	EQU	>834E		; when performing sector contains VDP addr for 256 byte buffer

; Convenience
GPLR0LB EQU >83E1

sector				; Read a sector from a synthesized disk, error on write
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,SECT_MSG
	BL	@sendmsg	; send sector request type
	LI	R0,2
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number and read/write flag
	LI	R0,2
	LI	R1,SECTORN
	BL	@sendmsg	; send sector number to operate on
	MOV	@SECTORN,@SECREAD	; copy sector number to expected result address
	LI	R0,1
	LI	R1,L2STAT
	BL	@recvmsg	; receive error code into >8350
	CLR	R3
	MOVB	@L2STAT,R3
	SWPB	R3
	CI	R3,SUCCESS	; TIPI python side will not return success for write operations
	JEQ	sectcont
	SRC	R3,3
	MOVB	R3,@L2STAT
	B	@l2derr

sectcont
	CLR	R1
	CB	@READWRI,R1	; check for read or write operation
	JEQ	sectwri

sectread
	LI	R0,256		; this is actually ignored. set maximum bytes to read
	MOV	@SECTBUF,R1
	BL	@vrecvmsg	; read single sector into vdp buffer
	CLR	@L2STAT		; set no error
	B	@l2derr		; return as handled

sectwri
	LI	R0,256		; this is actually ignored. set maximum bytes to read
	MOV	@SECTBUF,R1
	BL	@vsendmsg	; write single sector from vdp buffer to TIPI
	CLR	@L2STAT		; set no error
	B	@l2derr

protect				; Set or unset protect bit on a file
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,PROT_MSG
	BL	@sendmsg	; send protect file request type
	LI	R0,2
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number and protect value
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send filename to modify
	B	@getl2resp

frename				; rename a file on a device in the current path
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,FREN_MSG
	BL	@sendmsg	; send rename request header
	LI	R0,1
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send new filename
	LI	R0,10
	MOV	@WOLDNAM,R1
	BL	@vsendmsg	; send old filename
	B	@getl2resp

directinp			; read file bytes
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,DINP_MSG
	BL	@sendmsg	; send direct input header
	LI	R0,2
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number and number of blocks to read
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send name of file to read
	CLR	R8
	MOVB	@L2STAT,R8
	SWPB	R8
	AI	R8,>8300	; capture info address

	LI	R0,2
	MOV	R8,R1
	INCT	R1
	BL	@sendmsg	; send starting block number to read.
	LI	R0,1
	LI	R1,L2STAT
	BL	@recvmsg	; receive error code into >8350

	CLR	R3
	MOVB	@L2STAT,R3
	SWPB	R3
	CI	R3,SUCCESS
	JEQ	disuc
	SRC	R3,3
	MOVB	R3,@L2STAT
	JMP	l2derr
disuc
	MOVB	R3,@L2STAT	; clear error status on success

	LI	R0,8
	MOV	R8,R1
	INCT	R1		; set read buffer for file 'info'
	BL	@recvmsg	; read

	LI	R0,1
	LI	R1,BLOCKCNT
	BL	@recvmsg	; read blockcnt actually read from PI

	MOVB	@BLOCKCNT,@BLOCKCNT
	JEQ	l2derr		; finished if number of blocks to read was 0

	LI	R0,256		; this is actually ignored. set maximum bytes to read
	MOV	*R8,R1
	BL	@vrecvmsg	; read blocks into vdp buffer
	JMP	l2derr		; return as handled

directout			; write file bytes
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,DOUT_MSG
	BL	@sendmsg	; send direct output header
	LI	R0,2
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number and number of blocks to write
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send name of file to write
	CLR	R8
	MOVB	@L2STAT,R8
	SWPB	R8
	AI	R8,>8300	; capture info address
	LI	R0,8
	MOV	R8,R1
	INCT	R1
	BL	@sendmsg	; send start block and file info

	LI	R0,1
	LI	R1,L2STAT
	BL	@recvmsg	; receive error code into >8350

	CLR	R3
	MOVB	@L2STAT,R3
	SWPB	R3
	CI	R3,SUCCESS
	JEQ	dosuc
	SRC	R3,3
	MOVB	R3,@L2STAT
	JMP	l2derr		; return now if there was error
dosuc
	CLR	R0
	MOVB	@BLOCKCNT,R0	; block count * 256 ( by being in the MSB )
	JEQ	l2done		; skip sending blocks if block count was 0
	MOV	*R8,R1
	BL	@vsendmsg	; send the data blocks

	LI	R0,1
	LI	R1,L2STAT
	BL	@recvmsg	; get data write confirmation
l2done
	CLR	R3
	MOVB	@L2STAT,R3
	SWPB	R3
	CI	R3,SUCCESS
	JEQ	dosuc2
	SRC	R3,3
	MOVB	R3,@L2STAT
	JMP	l2derr
dosuc2
	MOVB	R3,@L2STAT	; turn success into 0

	JMP	l2derr


l2derr				; handle errors from direct input or direct output
	MOV	R7,R11
	INCT	R11
	RT

setpath				; set current directory for a unit/drive
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,PATH_MSG
	BL	@sendmsg	; send set path request header
	LI	R0,1
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number
	MOV	@PATHNAM,R1
	.setvdpra R1
	CLR	R0
	MOVB	@VDPRD,R0
	SWPB	R0		; get length of string
	MOV	@PATHNAM,R1
	INC	R1
	BL	@vsendmsg	; send path string
	JMP	getl2resp

createdir			; create a subdirectory
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,CDIR_MSG
	BL	@sendmsg	; send set path request header
	LI	R0,1
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send new directory name
	JMP	getl2resp

deldir				; delete a directory
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,DDIR_MSG
	BL	@sendmsg	; send set path request header
	LI	R0,1
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send new directory name
	JMP	getl2resp

drename				; directory rename
	LIMI	0
	MOV	R11,R7
	LI	R0,1
	LI	R1,RDIR_MSG
	BL	@sendmsg	; send rename request header
	LI	R0,1
	LI	R1,UNITNO
	BL	@sendmsg	; send unit number
	LI	R0,10
	MOV	@WFILNAM,R1
	BL	@vsendmsg	; send new name
	LI	R0,10
	MOV	@WOLDNAM,R1
	BL	@vsendmsg	; send old name
	JMP	getl2resp

retl2err
	MOV	R7,R11
	INCT	R11
	RT			; error already stored in L2STAT

retl2sk
	MOV	R7,R11
	RT

getl2resp
	LI	R0,1
	LI	R1,L2STAT
	BL	@recvmsg	; receive error code into >8350
	MOVB	@L2STAT,@L2STAT
	JEQ	retl2sk		; PI didn't handled request
	CLR	R0
	MOVB	@L2STAT,@GPLR0LB
	CI	R0,SUCCESS
	JEQ	l2suc
	SRC	R0,3
	MOVB	R0,@L2STAT
	JMP	retl2err
l2suc
	MOVB	R0,@L2STAT	; clear special PI success code and proceed to return
	JMP	retl2err

setfiles			; Buffer allocation routine
	LIMI	0
	MOV	R11,R7
	CI	R12,>1100	; check if is filling in for floppy controller.
	JNE	retl2sk		;   if not, skip, hoping real FDC will get called.
	BL	@dofiles
	JMP	retl2err

dofiles
	CLR	R1
	MOVB	@BUFCNT,R1
	SWPB	R1
	CI	R1,0		; check for bad Parameters
	JEQ	fileserr
	CI	R1,>0F
	JGT	fileserr
	MPY	@perfile,R1	; compute buffer
	MOV	R2,R1		; result should be small enough for 1 word.
	AI	R1,6		; subtract an addition 5 + 1
	LI	R2,>3DEF
	S	R1,R2		; compute new value
	MOV	R2,@VDPSTACK
	MOV	R2,R1
	INC	R1
	ORI	R1,VDWRITE
	SWPB	R1
	MOVB	R1,@VDPWA
	SWPB	R1
	MOVB	R1,@VDPWA

	LI	R2,>AA3F
	MOVB	R2,@VDPWD
	SWPB	R2
	MOVB	R2,@VDPWD

	LI	R2,>FF11
	MOVB	R2,@VDPWD
	SWPB	R2
	MOVB	R2,@VDPWD

	MOVB	@BUFCNT,@VDPWD
	CLR	R1
	JMP	filesret

fileserr
	LI	R1,1
filesret
	MOVB	R1,@L2STAT
	RT


perfile	DATA 	518		; size of buffer per file


